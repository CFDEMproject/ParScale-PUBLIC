# fedora_fpic = Fedora Core 6, mpic++, OpenMPI-1.1, FFTW2, no HDF5 

SHELL = /bin/sh

# ---------------------------------------------------------------------
# compiler/linker settings
# specify flags and libraries needed for your compiler
GIT_REMOTE := $(shell git remote -v | sed -n '/fetch/p' | cut -d ' ' -f1 | cut -f2)
GIT_BRANCH := $(shell git symbolic-ref --short HEAD)
GIT_VERSION := $(shell git describe --abbrev=8 --dirty --always --tags)

CC =		mpic++
CCFLAGS =	$(PASCAL_C11_STD) -O2 \
		-funroll-loops -fstrict-aliasing -Wall -W -Wno-uninitialized -g -Wno-unused-parameter \
		-Wno-reorder -Wno-write-strings  -U H5_LIB \
        -DGITREMOTE=\"$(GIT_REMOTE)\" -DGITBRANCH=\"$(GIT_BRANCH)\" -DGITCOMMIT=\"$(GIT_VERSION)\" 
SHFLAGS =	-fPIC
DEPFLAGS =	-M

LINK =		mpic++
LINKFLAGS =	-O
LIB =           -lstdc++
SIZE =		size

ARCHIVE =	ar
ARFLAGS =	-rcsv
SHLIBFLAGS =	-shared

# ---------------------------------------------------------------------
# LAMMPS-specific settings
# specify settings for LAMMPS features you will use
# if you change any -D setting, do full re-compile after "make clean"

# LAMMPS ifdef settings, OPTIONAL
# see possible settings in doc/Section_start.html#2_2 (step 4)

LMP_INC = -I$(PASCAL_LIGGGHTS_SRC_DIR)	-DLAMMPS_GZIP -I$(PASCAL_THIRDPARTY_DIR)/chemkinReader/src
LMP_LIB = 

# MPI library, REQUIRED
# see discussion in doc/Section_start.html#2_2 (step 5)
# can point to dummy MPI library in src/STUBS as in Makefile.serial
# INC = path for mpi.h, MPI compiler settings
# PATH = path for MPI library
# LIB = name of MPI library

MPI_INC =       
MPI_PATH = 
MPI_LIB =	

# FFT library, OPTIONAL
# see discussion in doc/Section_start.html#2_2 (step 6)
# can be left blank to use provided KISS FFT library
# INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings
# PATH = path for FFT library
# LIB = name of FFT library

FFT_INC =       
FFT_PATH = 
FFT_LIB =	

# JPEG and/or PNG library, OPTIONAL
# see discussion in doc/Section_start.html#2_2 (step 7)
# only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC
# INC = path(s) for jpeglib.h and/or png.h
# PATH = path(s) for JPEG library and/or PNG library
# LIB = name(s) of JPEG library and/or PNG library

JPG_INC =       
JPG_PATH = 	
JPG_LIB =	


# ---------------------------------------------------------------------

# Third party libraries
# see discussion in doc/Section_start.html#2_2 (step 7)
# only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC
# INC = path(s) to header files for third party software
# PATH = 
# LIB = name(s) of third party libraries to be linked

THIRDPARTY_INC =  -I$(PASCAL_INST_DIR)/include -I$(PASCAL_QT5_DIR)/include $(PASCAL_EXTRA_INCLUDES)
THIRDPARTY_PATH = 	
THIRDPARTY_LIB =	-L$(PASCAL_INST_DIR)/lib64 -lsundials_cvode -lsundials_nvecserial -L$(PASCAL_INST_DIR)/lib -L$(PASCAL_QT5_DIR)/lib -lQt5Core -L$(PASCAL_THIRDPARTY_DIR)/chemkinReader/src -lchemkinreader -lboost_regex $(PASCAL_EXTRA_LIBS)

# ---------------------------------------------------------------------
# build rules and dependencies
# no need to edit this section

EXTRA_INC = $(LMP_INC) $(PKG_INC) $(MPI_INC) $(FFT_INC) $(JPG_INC) $(PKG_SYSINC)
EXTRA_PATH = $(PKG_PATH) $(MPI_PATH) $(FFT_PATH) $(JPG_PATH) $(PKG_SYSPATH)
EXTRA_LIB = $(LMP_LIB) $(PKG_LIB) $(MPI_LIB) $(FFT_LIB) $(JPG_LIB) $(PKG_SYSLIB)

# Path to src files

vpath %.cpp ..
vpath %.h ..

# Link target

$(EXE):	$(OBJ)
	$(LINK) $(LINKFLAGS) $(EXTRA_PATH) $(THIRDPARTY_PATH) $(OBJ) $(EXTRA_LIB) $(THIRDPARTY_LIB) $(LIB) -o $(EXE)
	$(SIZE) $(EXE)

# Library targets

lib:	$(OBJ)
	$(ARCHIVE) $(ARFLAGS) $(EXE) $(OBJ)

shlib:	$(OBJ)
	$(CC) $(CCFLAGS) $(SHFLAGS) $(SHLIBFLAGS) $(EXTRA_PATH) $(THIRDPARTY_PATH) -o $(EXE) \
        $(OBJ) $(EXTRA_LIB) $(THIRDPARTY_LIB) $(LIB)

# Compilation rules

%.o:%.cpp
	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) $(THIRDPARTY_INC) -c $<

%.d:%.cpp
	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) $(THIRDPARTY_INC) $(DEPFLAGS) $< > $@

# Individual dependencies

DEPENDS = $(OBJ:.o=.d)
sinclude $(DEPENDS)
